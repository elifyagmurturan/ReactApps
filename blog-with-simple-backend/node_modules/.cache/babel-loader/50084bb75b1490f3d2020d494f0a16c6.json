{"ast":null,"code":"var __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport resolveChunks from './Resolvable';\nimport { createNotFoundChunk } from './Chunks';\nimport { concatMatcherIterators, createMatcherIterator } from './Matcher';\nexport function createChunksMatcher(maybeResolvable, forceChildMatcher, getChunks, exact, processDuringCrawl, predicate) {\n  function chunksMatcherGenerator(request, child) {\n    var unmatchedPathnamePart, parentIterator;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          unmatchedPathnamePart = request.path;\n          if (!((exact === undefined ? !child : exact) && unmatchedPathnamePart && unmatchedPathnamePart !== '/')) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , [createNotFoundChunk(request)]];\n\n        case 1:\n          _a.sent();\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 2:\n          parentIterator = request.crawler && !processDuringCrawl || predicate && !predicate(request) ? empty() : resolveChunks(maybeResolvable, request, function (value) {\n            return getChunks(value, request);\n          });\n          return [5\n          /*yield**/\n          , __values(child ? concatMatcherIterators(parentIterator, createMatcherIterator(child, request)) : parentIterator)];\n\n        case 3:\n          _a.sent();\n\n          _a.label = 4;\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  }\n\n  return function (childGenerator) {\n    return function (request) {\n      return chunksMatcherGenerator(request, forceChildMatcher ? forceChildMatcher(childGenerator) : childGenerator);\n    };\n  };\n}\n\nfunction empty() {\n  return __generator(this, function (_a) {\n    switch (_a.label) {\n      case 0:\n        return [4\n        /*yield*/\n        , []];\n\n      case 1:\n        _a.sent();\n\n        return [2\n        /*return*/\n        ];\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}