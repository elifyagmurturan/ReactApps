{"ast":null,"code":"import { useCallback, useEffect, useRef, useState } from 'react';\nimport useDebouncedCallback from './useDebouncedCallback';\n\nfunction valueEquality(left, right) {\n  return left === right;\n}\n\nexport default function useDebounce(value, delay, options) {\n  var eq = options && options.equalityFn || valueEquality;\n\n  var _a = useState(value),\n      state = _a[0],\n      dispatch = _a[1];\n\n  var debounced = useDebouncedCallback(useCallback(function (value) {\n    return dispatch(value);\n  }, []), delay, options);\n  var previousValue = useRef(value);\n  useEffect(function () {\n    // We need to use this condition otherwise we will run debounce timer for the first render (including maxWait option)\n    if (!eq(previousValue.current, value)) {\n      debounced.callback(value);\n      previousValue.current = value;\n    }\n  }, [value, debounced, eq]);\n  return [state, {\n    cancel: debounced.cancel,\n    pending: debounced.pending,\n    flush: debounced.flush\n  }];\n}","map":null,"metadata":{},"sourceType":"module"}