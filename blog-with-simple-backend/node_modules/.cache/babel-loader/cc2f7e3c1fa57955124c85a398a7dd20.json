{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nexport function routeReducer(route, chunk) {\n  if (route) {\n    if (chunk.type === 'url') {\n      return __assign(__assign({}, route), {\n        chunks: route.chunks.filter(function (chunk) {\n          return chunk.type !== 'url';\n        }),\n        url: chunk.url\n      });\n    }\n\n    if (route.type !== 'ready') {\n      return route;\n    }\n  }\n\n  var base = {\n    lastChunk: chunk,\n    method: chunk.request && chunk.request.method,\n    chunks: route ? route.chunks.concat(chunk) : [chunk],\n    data: route ? route.data : {},\n    headers: route ? route.headers : {},\n    heads: route ? route.heads : [],\n    state: route ? route.state : {},\n    status: route ? route.status : 200,\n    title: route && route.title,\n    url: route ? route.url : chunk.url,\n    views: route ? route.views : []\n  };\n\n  switch (chunk.type) {\n    case 'busy':\n      return __assign(__assign({}, base), {\n        type: 'busy'\n      });\n\n    case 'data':\n      return __assign(__assign({}, base), {\n        type: 'ready',\n        data: __assign(__assign({}, base.data), chunk.data)\n      });\n\n    case 'error':\n      return __assign(__assign({}, base), {\n        type: 'error',\n        error: chunk.error,\n        status: base.status && base.status >= 400 ? base.status : chunk.error.status || 500\n      });\n\n    case 'head':\n      return __assign(__assign({}, base), {\n        type: 'ready',\n        heads: base.heads.concat(chunk.head)\n      });\n\n    case 'headers':\n      return __assign(__assign({}, base), {\n        type: 'ready',\n        headers: __assign(__assign({}, base.headers), chunk.headers)\n      });\n\n    case 'redirect':\n      return __assign(__assign({}, base), {\n        type: 'redirect',\n        to: chunk.to\n      });\n\n    case 'state':\n      return __assign(__assign({}, base), {\n        type: 'ready',\n        state: __assign(__assign({}, base.state), chunk.state)\n      });\n\n    case 'status':\n      return __assign(__assign({}, base), {\n        type: 'ready',\n        status: chunk.status\n      });\n\n    case 'title':\n      return __assign(__assign({}, base), {\n        type: 'ready',\n        title: chunk.title\n      });\n\n    case 'view':\n      return __assign(__assign({}, base), {\n        type: 'ready',\n        views: base.views.concat(chunk.view)\n      });\n\n    default:\n      return __assign(__assign({}, base), {\n        type: 'ready'\n      });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}