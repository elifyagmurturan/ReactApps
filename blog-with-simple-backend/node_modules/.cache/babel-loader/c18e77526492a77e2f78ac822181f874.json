{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Router } from './Router';\nimport { routeReducer } from './Route';\nimport { resolve } from './resolve';\nimport { createURLDescriptor, modifyTrailingSlash } from './URLTools';\nimport { SimpleSubscription, createOrPassthroughObserver } from './Observable';\nimport { OutOfRootError } from './Errors';\nimport { Deferred } from './Deferred'; // Keep track of the number of navigations since the last steady route,\n// so we can detect and bail out of navigation loops.\n\nvar MAX_NAVIGATIONS_SINCE_STEADY = 100;\n\nvar Navigation =\n/** @class */\nfunction () {\n  function Navigation(options) {\n    var _this = this;\n\n    this.handleUnsubscribe = function (observer) {\n      var index = _this.observers.indexOf(observer);\n\n      if (index !== -1) {\n        _this.observers.splice(index, 1);\n      }\n    }; // Allows for either the location or route or both to be changed at once.\n\n\n    this.handleChunkList = function (chunks) {\n      var isSteady = true;\n      var location = _this._history.location;\n\n      for (var i = 0; i < chunks.length; i++) {\n        var chunk = chunks[i];\n\n        if (chunk.type === 'busy') {\n          isSteady = false;\n        }\n\n        if (chunk.type === 'state') {\n          _this.ignoreNextLocationChange = true;\n\n          _this._history.replace(__assign(__assign({}, location), {\n            state: setLocationRequestState(location.state, chunk.state)\n          }));\n        }\n\n        if (chunk.type === 'redirect') {\n          var revertedState = revertLocationState(location.state);\n\n          if (revertedState) {\n            _this.ignoreNextLocationChange = true;\n\n            _this._history.replace(__assign(__assign({}, location), {\n              state: revertedState\n            }));\n\n            _this._history.push(chunk.to);\n          } else {\n            _this._history.replace(chunk.to);\n          }\n\n          return;\n        }\n      }\n\n      _this.setRoute([{\n        type: 'url',\n        url: createURLDescriptor(_this.lastHandledLocation)\n      }].concat(chunks).reduce(routeReducer, undefined), isSteady);\n    };\n\n    this._history = options.history;\n    this.observers = [];\n    this.isLastRouteSteady = false;\n    this.navigationsSinceSteady = 0;\n    this.basename = options.basename;\n    this.matcher = options.routes;\n    this._router = new Router({\n      context: options.context,\n      routes: options.routes,\n      basename: options.basename\n    });\n    this.trailingSlash = options.trailingSlash === undefined ? 'remove' : options.trailingSlash;\n    this.unlisten = this._history.listen(function (location) {\n      return _this.handleLocationChange(location, false);\n    });\n    this.navigate = this.navigate.bind(this);\n  }\n\n  Navigation.prototype.dispose = function () {\n    this.observers.length = 0;\n    this.unlisten();\n    delete this.unlisten;\n    delete this._history;\n\n    if (this.observableSubscription) {\n      this.observableSubscription.unsubscribe();\n    }\n\n    delete this.observableSubscription;\n    delete this._router;\n    delete this.waitUntilSteadyDeferred;\n    delete this.lastRoute;\n    delete this._router;\n  };\n\n  Navigation.prototype.go = function (n) {\n    return __awaiter(this, void 0, void 0, function () {\n      var urlChanged;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            urlChanged = new Promise(function (resolve) {\n              var unlisten = _this._history.listen(function () {\n                unlisten();\n                resolve();\n              });\n            });\n\n            this._history.go(n);\n\n            return [4\n            /*yield*/\n            , urlChanged];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , this.getRoute()];\n        }\n      });\n    });\n  };\n\n  Navigation.prototype.goBack = function () {\n    return this.go(-1);\n  };\n\n  Navigation.prototype.goForward = function () {\n    return this.go(1);\n  };\n\n  Navigation.prototype.navigate = function (url, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var nextURL;\n\n    if (typeof url === 'string') {\n      nextURL = createURLDescriptor(url);\n    } else if (url.url) {\n      options = url;\n      nextURL = createURLDescriptor(options.url);\n    } else if (url) {\n      nextURL = createURLDescriptor(url);\n    } else {\n      throw new Error(\"You must specify a URL or state to navigation.navigate().\");\n    }\n\n    var currentLocation = this._history.location; // Default to replace when we're not changing the URL itself, but only\n    // changing state.\n\n    var shouldReplace = options.replace || options.replace !== false && currentLocation.pathname === nextURL.pathname && currentLocation.search === nextURL.search && currentLocation.hash === nextURL.hash;\n\n    this._history[shouldReplace ? 'replace' : 'push']({\n      pathname: nextURL.pathname,\n      search: nextURL.search,\n      hash: nextURL.hash,\n      state: packLocationState({\n        revertTo: shouldReplace ? currentLocation.state : undefined,\n        method: options.method,\n        headers: options.headers,\n        body: options.body,\n        state: options.state\n      })\n    });\n\n    return this.getRoute();\n  }; // TODO:\n  // Put any history state on a \"prefetched state\" object, so that on\n  // navigation, any prefetched state can be reused.\n\n\n  Navigation.prototype.prefetch = function (url) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , resolve({\n              basename: this.basename,\n              routes: this.matcher,\n              context: this._router.context,\n              url: url\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Navigation.prototype.refresh = function () {\n    this.handleLocationChange(this._history.location, true);\n    return this.getRoute();\n  };\n\n  Navigation.prototype.setContext = function (context) {\n    this._router.setContext(context);\n\n    return this.refresh();\n  };\n  /**\n   * Get the latest Route object, regardless of whether it is loading.\n   *\n   * This is named as `getCurrentValue()` so that Navigation objects can be\n   * used with React's `createSubscription()`, and other tools that follow\n   * the same specification.\n   */\n\n\n  Navigation.prototype.getCurrentValue = function () {\n    return this.lastRoute;\n  };\n  /**\n   * If loading, returns a promise to the non-busy route. Otherwise, returns\n   * the current route.\n   */\n\n\n  Navigation.prototype.getRoute = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (this.isLastRouteSteady) {\n          return [2\n          /*return*/\n          , this.lastRoute];\n        } else if (!this.waitUntilSteadyDeferred) {\n          this.waitUntilSteadyDeferred = new Deferred();\n        }\n\n        return [2\n        /*return*/\n        , this.waitUntilSteadyDeferred.promise];\n      });\n    });\n  };\n  /**\n   * Returns the current history state\n   */\n\n\n  Navigation.prototype.extractState = function () {\n    return this._history.location.state;\n  };\n  /**\n   * If you're using code splitting, you'll need to subscribe to changes to\n   * Route, as the route may change as new code chunks are received.\n   */\n\n\n  Navigation.prototype.subscribe = function (onNextOrObserver, onError, onComplete) {\n    var observer = createOrPassthroughObserver(onNextOrObserver, onError, onComplete);\n    this.observers.push(observer);\n    return new SimpleSubscription(this.handleUnsubscribe, observer);\n  };\n\n  Navigation.prototype.handleLocationChange = function (location, force) {\n    if (this.ignoreNextLocationChange) {\n      this.ignoreNextLocationChange = false;\n      return;\n    }\n\n    if (++this.navigationsSinceSteady > MAX_NAVIGATIONS_SINCE_STEADY) {\n      console.error(\"Detected possible navigation loop with \" + MAX_NAVIGATIONS_SINCE_STEADY + \" navigations between steady routes. Bailing.\");\n      return;\n    } // Ensure the pathname always has a trailing `/`, so that we don't\n    // have multiple URLs referring to the same page.\n\n\n    if (this.trailingSlash !== null) {\n      var modifiedPathname = modifyTrailingSlash(location.pathname, this.trailingSlash);\n\n      if (location.pathname !== modifiedPathname) {\n        this._history.replace(__assign(__assign({}, location), {\n          pathname: modifiedPathname\n        }));\n\n        return;\n      }\n    }\n\n    var url = createURLDescriptor(location);\n    var lastHandledLocation = this.lastHandledLocation;\n    this.lastHandledLocation = location;\n\n    if (this.observableSubscription) {\n      this.observableSubscription.unsubscribe();\n    }\n\n    var observable = this._router.createObservable(url, unpackLocationState(location.state));\n\n    if (observable) {\n      this.observableSubscription = observable.subscribe(this.handleChunkList);\n    } else if (!lastHandledLocation) {\n      throw new OutOfRootError(url);\n    }\n  };\n\n  Navigation.prototype.setRoute = function (route, isSteady) {\n    if (route !== this.lastRoute) {\n      this.lastRoute = route;\n      this.isLastRouteSteady = isSteady;\n\n      if (isSteady) {\n        this.navigationsSinceSteady = 0;\n      }\n\n      for (var i = 0; i < this.observers.length; i++) {\n        this.observers[i].next(route);\n      } // Check this.isLastRouteSteady instead of isSteady, in case one of our\n      // subscribers causes navigation again.\n\n\n      if (this.isLastRouteSteady && this.waitUntilSteadyDeferred) {\n        this.waitUntilSteadyDeferred.resolve(route);\n        delete this.waitUntilSteadyDeferred;\n      }\n    }\n  };\n\n  return Navigation;\n}();\n\nexport { Navigation };\nvar NAVI_STATE_KEY = '__navi__';\n/**\n * Set the value of request.state without changing the other request data.\n */\n\nfunction setLocationRequestState(locationState, newState) {\n  var _a;\n\n  if (locationState === void 0) {\n    locationState = {};\n  }\n\n  return __assign(__assign({}, newState), (_a = {}, _a[NAVI_STATE_KEY] = locationState[NAVI_STATE_KEY], _a));\n}\n\nfunction packLocationState(_a) {\n  var _b;\n\n  var revertTo = _a.revertTo,\n      state = _a.state,\n      requestDataWithoutState = __rest(_a, [\"revertTo\", \"state\"]);\n\n  if (revertTo) {\n    revertTo = __assign({}, revertTo);\n\n    if (revertTo[NAVI_STATE_KEY]) {\n      delete revertTo[NAVI_STATE_KEY].revertTo;\n    }\n  }\n\n  return __assign(__assign({}, state), (_b = {}, _b[NAVI_STATE_KEY] = {\n    requestDataWithoutState: requestDataWithoutState,\n    revertTo: revertTo\n  }, _b));\n}\n\nfunction unpackLocationState(state) {\n  if (state === void 0) {\n    state = {};\n  }\n\n  var requestDataState = __assign({}, state);\n\n  delete requestDataState[NAVI_STATE_KEY];\n  var naviState = state[NAVI_STATE_KEY] || {};\n  return __assign(__assign({}, naviState.requestDataWithoutState), {\n    state: Object.keys(requestDataState).length ? requestDataState : undefined\n  });\n}\n\nfunction revertLocationState(state) {\n  if (state === void 0) {\n    state = {};\n  }\n\n  var naviState = state[NAVI_STATE_KEY] || {};\n  return naviState.revertTo;\n}","map":null,"metadata":{},"sourceType":"module"}