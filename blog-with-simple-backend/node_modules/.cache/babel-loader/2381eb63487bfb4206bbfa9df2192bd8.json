{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport { HashScroll } from './HashScroll';\nimport { NaviContext } from './NaviContext';\n\nvar NaviProvider =\n/** @class */\nfunction (_super) {\n  __extends(NaviProvider, _super);\n\n  function NaviProvider(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.handleNavigationSnapshot = function (route) {\n      if (route.type !== 'busy') {\n        _this.setState({\n          steadyRoute: route,\n          busyRoute: undefined\n        });\n      } else {\n        _this.setState({\n          busyRoute: route\n        });\n      }\n    };\n\n    _this.handleError = function (error) {\n      throw error;\n    };\n\n    _this.state = {};\n    return _this;\n  }\n\n  NaviProvider.getDerivedStateFromProps = function (props, state) {\n    if (state.navigation !== props.navigation) {\n      var route = props.navigation.getCurrentValue();\n      return route.type === 'busy' ? {\n        steadyRoute: state.steadyRoute,\n        busyRoute: route,\n        navigation: props.navigation\n      } : {\n        steadyRoute: route,\n        busyRoute: undefined,\n        navigation: props.navigation\n      };\n    }\n\n    return null;\n  };\n\n  NaviProvider.prototype.render = function () {\n    return React.createElement(HashScroll, {\n      behavior: this.props.hashScrollBehavior\n    }, React.createElement(NaviContext.Provider, {\n      value: this.state\n    }, this.props.children));\n  };\n\n  NaviProvider.prototype.componentDidMount = function () {\n    this.subscribe();\n  };\n\n  NaviProvider.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.navigation !== this.props.navigation) {\n      this.unsubscribe();\n      this.subscribe();\n    }\n  };\n\n  NaviProvider.prototype.componentWillUnmount = function () {\n    this.unsubscribe();\n  };\n\n  NaviProvider.prototype.subscribe = function () {\n    if (!this.props.navigation) {\n      throw new Error(\"A <NaviProvider> component must receive a \\\"navigation\\\" prop.\");\n    }\n\n    this.subscription = this.props.navigation.subscribe(this.handleNavigationSnapshot, this.handleError);\n  };\n\n  NaviProvider.prototype.unsubscribe = function () {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      delete this.subscription;\n    }\n  };\n\n  return NaviProvider;\n}(React.Component);\n\nexport { NaviProvider };","map":null,"metadata":{},"sourceType":"module"}